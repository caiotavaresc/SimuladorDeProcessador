package simulador;

import interfaceControle.TradutorDeInstrucoes;
import java.util.*;

//A classe controladora será responsável pela interação com o usuário
public class Memoria {
	
	//Memória principal: Guarda tanto dados quanto instruções
	public List<Object> memoriaPrincipal;
	
	//Referência para o tradutor das instruções
	public TradutorDeInstrucoes tradutor;
	
	//Inicializar a memória
	public Memoria()
	{
		memoriaPrincipal = new ArrayList<Object>();
		
		//Inicializar os mapas de instruções e registradores
		TradutorDeInstrucoes.carregarMapaDeInstrucoes();
		TradutorDeInstrucoes.carregarMapaDeRegistradoresEntrada();
		TradutorDeInstrucoes.carregarMapaDeRegistradoresSaida();
		
	}
	
	//Método que escreve a instrução em Assembly e guarda na memória os sinais traduzidos
	public void setInstrucao(String instrucao)
	{
		memoriaPrincipal.add(instrucao);
	}
	
	//Método que pega a instrução em Assembly
	//Acho que não vai servir pra nada, mas já tinha feito...
	public String getInstrucao(int i)
	{
		return (String) memoriaPrincipal.get(i);
	}
	
	//Método que limpa as instruções das memórias
	public void clear()
	{
		memoriaPrincipal.clear();
	}
	
	//Imprimir as instruções armazenadas em memória
	public void imprimeMemoria()
	{
		Iterator<Object> it = memoriaPrincipal.iterator();
		
		while(it.hasNext())
			System.out.println(it.next());
	}
	
	//------------------------------MÉTODOS DE TRANSMISSÃO DE DADOS-------------------------------------
	public void EnviarDadoParaBarramento()
	{
		BarramentoDados.setDado(memoriaPrincipal.get(BarramentoDados.Endereco));
	}
	
}