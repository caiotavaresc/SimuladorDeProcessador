package simulador.cpu;

import simulador.*;

//Essa classe será responsável pela interpretação dos sinais de controle e por sua efetiva execução
public class InterpretadorSinais {

	private static Integer[] sinal;
	static BarramentoInterno barramentoInt = new BarramentoInterno();
	static BarramentoDados barramentoExt = new BarramentoDados();
	static Registradores registradores = new Registradores();
	static Uc unidadeControle = new Uc();
	
	//Calcula constantes: Método utilizado para saber qual é o sinal que está sendo passado pelo controle JMP
	//Esse método é uma abstração, na verdade, o controlador deveria verificar com um IF todas as combinações
	//diferentes entre as linhas de bits. Por uma questão prática, estamos verificando e somando, mais abaixo
	//utilizaremos esse resultado para decidir o que fazer com os valores constantes que vêm nas linhas de endereço
	//do sinal de controle (bits 32 a 63).
	public static int calculaConstantes()
	{
		int constante = 0;
		
			constante += (int) sinal[28] * Math.pow(2, 3);
			constante += (int) sinal[29] * Math.pow(2, 2);
			constante += sinal[30] * 2;
			constante += sinal[31];
		
		return constante;
	}
	
	//Passar o sinal necessário
	public static void setSinal(Integer[] MySign)
	{
		sinal = MySign;
	}
	
	//Método coração - INTERPRETAR
	public static void interpretar()
	{
		int i;
		
		//1: Mandar os sinais constantes para o barramento
		//As constantes são valores fixos que ficam nos últimos 32 bits do sinal de controle
		//Esses bits são utilizados para o cálculo de endereços, jumps e também para passar números diretamente
		//para um registrador ou endereço de memória. Como o professor disse, a palavra deve ter a quantidade exata
		//de bits, mas não precisamos ficar fazendo cálculos binários.
		//Desse modo, estou mandando o valor inteiro na posição 32. Entenda que eles na verdade estariam em todas as
		//outras posições como binário.

		switch(calculaConstantes())
		{
		case 1:
			//JMP
			unidadeControle.EnviarDadosBarramento(sinal[32]);
			break;
		case 2:
			//Envia o endereço para a linha de endereço do barramento
			unidadeControle.EnviarEnderecoBarramento(sinal[32]);
			break;
		case 3:
			//JZ - Somente se a Flag Zero estiver acesa
			if(Uc.flag0 == 1)
				unidadeControle.EnviarDadosBarramento(sinal[32]);
			break;
		case 4:
			//JNZ - Somente se a Flag Zero NÃO estiver acesa
			if(Uc.flag0 == 0)
				unidadeControle.EnviarDadosBarramento(sinal[32]);
			break;
		case 5:
			//JL - Somente se a Flag Zero NÃO estiver marcada E a Flag de Sinal estiver marcada.
			if(Uc.flag0 == 0 && Uc.flagSinal == 1)
				unidadeControle.EnviarDadosBarramento(sinal[32]);
			break;
		case 6:
			//JG - Somente se a Flag Zero NÃO estiver marcada E a Flag de Sinal NÃO estiver marcada
			if(Uc.flag0 == 0 && Uc.flagSinal == 0)
				unidadeControle.EnviarDadosBarramento(sinal[32]);
			break;
		case 7:
			//JLE - Somente se a Flag Zero estiver marcada OU a Flag de Sinal estiver marcada.
			if(Uc.flag0 == 1 || Uc.flagSinal == 1)
				unidadeControle.EnviarDadosBarramento(sinal[32]);
			break;
		}
		
		//2: Processar operações da ULA
		
		//Se a porta da ULA estiver aberta, transferir o conteúdo de X
		if(sinal[15]==1)
			Ula.enviarDadoULA(Registradores.X);
		
		//Solicitar operação da ULA
		Ula.operacao(sinal);
		
		//------ Verificar as portas de entrada abertas e jogar os dados nos barramentos
		
		//3 - Barramento Interno
		
		//Pegar todas as portas que entram no barramento
		for(i = 0; i < barramentoInt.EntradaBarramentoInterno.length; i++)
		{
			//Se a porta estiver aberta
			if(sinal[barramentoInt.EntradaBarramentoInterno[i]] == 1)
			{
				//enviar o sinal
				switch(barramentoInt.EntradaBarramentoInterno[i])
				{
				case 8:
					unidadeControle.EnviarPCBarramento();
					break;
				case 10:
					unidadeControle.EnviarMBRBarramento();
					break;
				case 0:
					registradores.EnviarAXBarramento();
					break;
				case 1:
					registradores.EnviarBXBarramento();
					break;
				case 2:
					registradores.EnviarCXBarramento();
					break;
				case 3:
					registradores.EnviarDXBarramento();
					break;
				case 16:
					Ula.EnviarACBarramento();
					//Se um dado foi recebido da ULA - As flags da UC são atualizadas com o resultado da expressão
					//Apenas se a UC estiver no ciclo de execução - o ciclo de busca não altera as flags
					if(Uc.myCicle == 2)
						unidadeControle.AtualizaFlags((Integer) BarramentoInterno.Dado);
				}
			}
		}
		
		//Pegar todas as portas que SAEM do barramento
		for(i = 0; i < barramentoInt.SaidaBarramentoInterno.length; i++)
		{
			//Se a porta estiver aberta
			if(sinal[barramentoInt.SaidaBarramentoInterno[i]] == 1)
			{
				//Enviar o sinal
				switch(barramentoInt.SaidaBarramentoInterno[i])
				{
				case 9:
					barramentoInt.enviarBarramentoPC();
					break;
				case 12:
					barramentoInt.enviarBarramentoMAR();
					break;
				case 13:
					barramentoInt.enviarBarramentoIR();
					break;
				case 11:
					barramentoInt.enviarBarramentoMBR();
					break;
				case 14:
					barramentoInt.enviarBarramentoX();
					break;
				case 4:
					barramentoInt.enviarBarramentoAX();
					break;
				case 5:
					barramentoInt.enviarBarramentoBX();
					break;
				case 6:
					barramentoInt.enviarBarramentoCX();
					break;
				case 7:
					barramentoInt.enviarBarramentoDX();
				}
			}
		}
		
		//4 - Ações da Memória - Se o endereço é válido
		if(sinal[26] == 1)
		{
			//Leitura
			if(sinal[27] == 0)
				Memoria.le();
			else if(sinal[27] == 1)
				Memoria.escreve();
		}
		
		//5 - Barramento Externo
		
		//Pegar todas as portas que entram no barramento externo
		for(i = 0; i < barramentoExt.barramentoExtEntradas.length; i++)
		{
			//Se a porta estiver aberta
			if(sinal[barramentoExt.barramentoExtEntradas[i]] == 1)
			{
				//Enviar o sinal
				switch(barramentoExt.barramentoExtEntradas[i])
				{
				case 17:
					unidadeControle.EnviarMARBarramentoExt();
					break;
				case 19:
					unidadeControle.EnviarMBRBarramentoExt();
					break;
				case 21:
					Memoria.EnviarDadoParaBarramento();
				}
			}
		}		
		
		//Pegar todas as portas que SAEM do barramento Externo
		for(i = 0; i < barramentoExt.barramentoExtSaidas.length; i++)
		{
			//Se a porta estiver aberta
			if(sinal[barramentoExt.barramentoExtSaidas[i]] == 1)
			{
				switch(barramentoExt.barramentoExtSaidas[i])
				{
				case 18:
					barramentoExt.enviarBarramentoExtMBR();
					break;
				case 20:
					barramentoExt.enviarEnderecoMemoria();
					barramentoExt.enviarDadoMemoria();
					break;
				}
			}
		}
	}
}