package simulador.cpu;

import java.util.*;

//Classe que recebe a String com a instrução e a traduz para a arquitetura
public class TradutorDeInstrucoes {
	
	//Mapas que guardarão os números das portas dos registradores e os números das instruções
	public static HashMap<String, Integer[]> mapaDeInstrucoes = new HashMap<String, Integer[]>();
	public static HashMap<String, Integer> mapaDeRegistradoresEntrada = new HashMap<String, Integer>();
	public static HashMap<String, Integer> mapaDeRegistradoresSaida = new HashMap<String, Integer>();
	
	//Mapa de Instruções estático - Adicionar os sinalizadores de instrução
	public static void carregarMapaDeInstrucoes()
	{
		Integer[] inc = {0, 0, 0, 1};
		mapaDeInstrucoes.put("INC", inc);
		
		Integer[] dec = {0, 0, 1, 0};
		mapaDeInstrucoes.put("DEC", dec);
		
		Integer[] add = {0, 0, 1, 1};
		mapaDeInstrucoes.put("ADD", add);
		
		Integer[] sub = {0, 1, 0, 0};
		mapaDeInstrucoes.put("SUB", sub);
		
		Integer[] mul = {0, 1, 0, 1};
		mapaDeInstrucoes.put("MUL", mul);
		
		Integer[] div = {0, 1, 1, 0};
		mapaDeInstrucoes.put("DIV", div);
		
		Integer[] cmp = {0, 1, 1, 1};
		mapaDeInstrucoes.put("CMP", cmp);
	}
	
	//Mapa de registradores estático - Portas de entrada
	public static void carregarMapaDeRegistradoresEntrada()
	{
		mapaDeRegistradoresEntrada.put("A", 4);
		mapaDeRegistradoresEntrada.put("B", 5);
		mapaDeRegistradoresEntrada.put("C", 6);
		mapaDeRegistradoresEntrada.put("D", 7);
	}
	
	//Mapa de registradores estático - Portas de saída
	public static void carregarMapaDeRegistradoresSaida()
	{
		mapaDeRegistradoresSaida.put("A", 0);
		mapaDeRegistradoresSaida.put("B", 1);
		mapaDeRegistradoresSaida.put("C", 2);
		mapaDeRegistradoresSaida.put("D", 3);
	}
	
	//Inicializar o tradutor com o endereço da lista de instruções (memória de bits)
	public TradutorDeInstrucoes()
	{
		carregarMapaDeInstrucoes();
		carregarMapaDeRegistradoresEntrada();
		carregarMapaDeRegistradoresSaida();
	}

	//Método encarregado de ler e traduzir cada instrução passada na linha de comando
	public void traduzInstrucao(String instrucao)
	{	
		Integer[] sinal = Uc.zeraTudo(64);
		
		//1 - Remover todas as vírgulas da instrução
		instrucao = instrucao.replaceAll(",", "");
		
		//fazer um split na instrução
		String[] res = instrucao.split(" ");
		String registrador;
		String registrador2;
		
		//Instrução INC
		if(res[0].equals("INC"))
		{
			//Pegar qual é o registrador para incrementar
			registrador = res[1];
			
			//Marcar a porta de saída do registrador como 1
			sinal[mapaDeRegistradoresSaida.get(registrador)] = 1;
			
			//Marcar a porta de entrada do X, para poder alimentar a ULA
			sinal[14] = 1;
			
			InterpretadorSinais.setSinal(sinal);
			InterpretadorSinais.interpretar();
			
			sinal = Uc.zeraTudo(64);
			
			//Marcar saida do X para alimentar a ULA
			sinal[15] = 1;
			
			//Carregar sinais de controle da operação da ULA
			DevolveSinais(sinal, res[0]);
			
			//Depois de executada a operação, enviar o resultado do AC para o registrador
			sinal[16] = 1;
			sinal[mapaDeRegistradoresEntrada.get(registrador)] = 1;
			
			InterpretadorSinais.setSinal(sinal);
			InterpretadorSinais.interpretar();
			
			sinal = Uc.zeraTudo(64);
			return;
		}
		
		//instrução DEC
		if(res[0].equals("DEC"))
		{
			//Pegar qual é o registrador para decrementar
			registrador = res[1];
			
			//Marcar porta de saída do registrador como 1
			sinal[mapaDeRegistradoresSaida.get(registrador)] = 1;
			
			//Marcar a porta de entrada do X como 1
			sinal[14] = 1;
			
			InterpretadorSinais.setSinal(sinal);
			InterpretadorSinais.interpretar();
			
			sinal = Uc.zeraTudo(64);
			
			//Marcar a porta de saída do X para alimentar a ULA
			sinal[15] = 1;
			
			//Carregar sinais de controle da operação da ULA
			DevolveSinais(sinal, res[0]);
			
			//Depois de executada a operação, enviar o AC para o registrador
			sinal[16] = 1;
			sinal[mapaDeRegistradoresEntrada.get(registrador)] = 1;
			
			InterpretadorSinais.setSinal(sinal);
			InterpretadorSinais.interpretar();
			
			sinal = Uc.zeraTudo(64);
			return;
		}
		
		//Procedimento de produção de sinais dinâmico - Gera sinais diferentes dentro do mesmo código
		if(res[0].equals("ADD") || res[0].equals("SUB") || res[0].equals("MUL") || res[0].equals("DIV"))
		{
			//Se estivermos falando de uma multiplicação, precisaremos mudar a lógica dos operandos
			//Mas o funcionamento interno é o mesmo
			if(res[0].equals("MUL") || res[0].equals("DIV"))
			{
				registrador = "A";
				registrador2 = res[1];
			}
			//Caso geral: soma e subtração
			else
			{
			//Registrador 1 -> Recebe o operando
			registrador = res[1];
			//Registrador 2 -> Recebe o outro operando
			registrador2 = res[2];
			}
			
			//Marcar a porta de saída do registrador 1 e a porta de entrada do X
			sinal[mapaDeRegistradoresSaida.get(registrador)] = 1;
			sinal[14] = 1;
			
			InterpretadorSinais.setSinal(sinal);
			InterpretadorSinais.interpretar();
			
			sinal = Uc.zeraTudo(64);
			
			//Abrir a saída do X pra mandar o primeiro operando pra ULA
			sinal[15] = 1;
			
			//Ainda não vai ser executada operação nenhuma na ULA;
			
			//Mandar o segundo operando pro X
			
			//Nos casos de ADD e SUB, se o segundo operando for um número ou letra minúscula(hexa)
			//Nos casos de DIV e MUL, o segundo registrador NUNCA será uma letra minúscula ou um número
			//portanto ele NUNCA entrará aqui
			if(Character.isDigit(registrador2.charAt(0)) || (Character.isLetter(registrador2.charAt(0)) && Character.isLowerCase(registrador2.charAt(0))))
			{
				//Mandar o sinal de controle com o número em questão ao invés do registrador
				sinal[32] = Integer.parseInt(registrador2, 16);
				sinal[31] = 1;
			}
			else
			{
				//Caso contrário, é um ADD de Registrador e, portanto, basta abrir a porta do segundo registrador
				sinal[mapaDeRegistradoresSaida.get(registrador2)] = 1;
			}
			sinal[14] = 1;
			
			InterpretadorSinais.setSinal(sinal);
			InterpretadorSinais.interpretar();
			
			sinal = Uc.zeraTudo(64);
			
			//Abrir a saída do X pra mandar o segundo oprando pra ULA
			sinal[15] = 1;
			
			//Mandar o sinal de soma
			DevolveSinais(sinal, res[0]);
			
			//Enviar o AC para o registrador correto
			sinal[16] = 1;
			sinal[mapaDeRegistradoresEntrada.get(registrador)] = 1;
			
			InterpretadorSinais.setSinal(sinal);
			InterpretadorSinais.interpretar();
			
			sinal = Uc.zeraTudo(64);
			
			//Como na divisão é necessário enviar também o resto,
			//Esse sinal de controle só será enviado na divisão
			//O resto fica armazenado na ULA e vai para o AC logo depois que o quociente sai
			//Basta enviar o conteúdo do AC para o registrador D
			if(res[0].equals("DIV"))
			{
				//Enviar o resto para o registrador D
				sinal[16] = 1;
				sinal[mapaDeRegistradoresEntrada.get("D")] = 1;
				
				InterpretadorSinais.setSinal(sinal);
				InterpretadorSinais.interpretar();
				
				sinal = Uc.zeraTudo(64);
			}
			return;
		}
		
		//Validar os diferentes tipos de MOV
		if(res[0].equals("MOV"))
		{			
			sinal = Uc.zeraTudo(64);
			
			registrador = res[1];
			registrador2 = res[2];
						
			//Verificar o tipo de MOV
			//SE O PRIMEIRO OPERANDO FOR UM REGISTRADOR - Primeira posição é LETRA
			if(Character.isLetter(registrador.charAt(0)))
			{
				//Se o segundo também for uma letra
				if(Character.isLetter(registrador2.charAt(0)) || Character.isDigit(registrador2.charAt(0)))
				{
					//E se a segunda letra também iniciar como maiúscula
					if(Character.isLetter(registrador2.charAt(0)) && Character.isUpperCase(registrador2.charAt(0)))
					{
						//É um MOV de registrador pra registrador
						//Esse MOV é Bem Simples, basta abrir as portas dos registradores
						//Abrir a porta de entrada do registrador 1
						sinal[mapaDeRegistradoresEntrada.get(registrador)] = 1;
						
						//Abrir a porta de saída do registrador 2
						sinal[mapaDeRegistradoresSaida.get(registrador2)] = 1;
						
						//Mandar executar o sinal
						InterpretadorSinais.setSinal(sinal);
						InterpretadorSinais.interpretar();
						
						sinal = Uc.zeraTudo(64);
						return;
					}
					//Se a segunda não for letra ou não iniciar como maiúscula, isso significa que ela é um número em hexa
					else 
					{
						//Para atribuições, basta jogar o número no barramento e abrir a porta que vai para o registrador
						sinal[32] = Integer.parseInt(registrador2, 16);
						
						//Mandar sinal de controle para pôr o valor constante na linha de dados
						sinal[31] = 1;
						
						//Abrir apenas a porta de de entrada do registrador 1
						sinal[mapaDeRegistradoresEntrada.get(registrador)] = 1;
						
						//Mandar executar o sinal
						InterpretadorSinais.setSinal(sinal);
						InterpretadorSinais.interpretar();
						
						sinal = Uc.zeraTudo(64);
						return;
					}
				}
				//Senão, é um endereço de memória
				else
				{
					//1: Pegar o endereço
					registrador2 = registrador2.replaceAll("\\[", "");
					registrador2 = registrador2.replaceAll("\\]", "");
					
					//Pegar o valor em Hexa
					registrador2 = Integer.toString(Integer.parseInt(registrador2, 16));
					
					//1º Sinal - Pôr o endereço no barramento e pedir para enviá-lo à memória
					sinal[32] = Integer.parseInt(registrador2);
					
					//Controle de JMP para pôr o endereço no barramento
					sinal[30] = 1;
					
					//Abrir portas do MAR
					sinal[12] = 1;
					sinal[17] = 1;
					
					//Enviar o endereço pra memória
					sinal[20] = 1;
					
					InterpretadorSinais.setSinal(sinal);
					InterpretadorSinais.interpretar();
					
					sinal = Uc.zeraTudo(64);
					
					//2º Sinal: Ler da memória e jogar no MBR
					//Mandar sinal de Address Valid e Leitura para a memória
					sinal[26] = 1;
					sinal[27] = 0;
					
					//Abrir a porta da memória para o barramento externo
					sinal[21] = 1;
					
					//Abrir a porta do barramento externo para o MBR
					sinal[18] = 1;
					
					//Executar
					InterpretadorSinais.setSinal(sinal);
					InterpretadorSinais.interpretar();
					
					sinal = Uc.zeraTudo(64);
					
					//3º Sinal: Jogar do MBR no registrador correto
					//Abrir a porta do MBR para o barramento interno
					sinal[10] = 1;
					
					//Abrir a porta de entrada do registrador
					sinal[mapaDeRegistradoresEntrada.get(registrador)] = 1;
					
					//Executar
					InterpretadorSinais.setSinal(sinal);
					InterpretadorSinais.interpretar();
					
					sinal = Uc.zeraTudo(64);
				}
			}
			//Caso contrário, é um endereço de memória
			else
			{				
				//1: Descobrir o endereço
				registrador = registrador.replaceAll("\\[", "");
				registrador = registrador.replaceAll("\\]", "");
				
				registrador = Integer.toString(Integer.parseInt(registrador, 16));
				
				//Fazer a mesma validação de cima para o segundo operando agora.
				//Se o segundo também for uma letra
				if(Character.isLetter(registrador2.charAt(0)) || Character.isDigit(registrador2.charAt(0)))
				{
					//E se a segunda letra também iniciar como maiúscula
					if(Character.isLetter(registrador2.charAt(0)) && Character.isUpperCase(registrador2.charAt(0)))
					{
						//É um MOV de registrador pra endereço de memória
						//1 - Mandar o endereço
						sinal[32] = Integer.parseInt(registrador);
						sinal[30] = 1;
						
						//Abrir as portas do MAR
						sinal[12] = 1;
						sinal[17] = 1;
						
						//Do MAR já mandar pra memória
						sinal[20] = 1;
						
						//Mandar executar o sinal
						InterpretadorSinais.setSinal(sinal);
						InterpretadorSinais.interpretar();
						
						sinal = Uc.zeraTudo(64);
						
						//Agora é necessário mandar o dado pra memória
						
						//Abrir a porta de saída do registrador 2
						sinal[mapaDeRegistradoresSaida.get(registrador2)] = 1;
						
						//Abrir a porta de entrada do MBR
						sinal[11] = 1;
						
						//Abrir a porta de saída do MBR
						sinal[19] = 1;
						
						//Mandar o dado para a memória
						sinal[20] = 1;
						
						//Mandar executar o sinal
						InterpretadorSinais.setSinal(sinal);
						InterpretadorSinais.interpretar();
						
						sinal = Uc.zeraTudo(64);
						
						//Mandar Escrever o dado na memória
						sinal[26] = 1;
						sinal[27] = 1;
						
						//Mandar executar o sinal
						InterpretadorSinais.setSinal(sinal);
						InterpretadorSinais.interpretar();
						
						sinal = Uc.zeraTudo(64);
						return;
					}
					//Se a segunda não for letra ou não iniciar como maiúscula, isso significa que ela é um número em hexa
					else 
					{
						//É UM MOV DE UMA CONSTANTE PARA UM ENDEREÇO DE MEMÓRIA
						
						//1 - Mandar o endereço
						sinal[32] = Integer.parseInt(registrador);
						sinal[30] = 1;
						
						//Abrir as portas do MAR
						sinal[12] = 1;
						sinal[17] = 1;
						
						//Mandar executar o sinal
						InterpretadorSinais.setSinal(sinal);
						InterpretadorSinais.interpretar();
						
						sinal = Uc.zeraTudo(64);
						
						//2 - Mandar o dado
						sinal[32] = Integer.parseInt(registrador2, 16);
						
						//Marcar o sinal de transferência de dado
						sinal[31] = 1;
						
						//Abrir as portas do MBR
						sinal[11] = 1;
						sinal[19] = 1;
						
						//Mandar o dado e o endereço para a memória
						sinal[20] = 1;
						
						//Mandar executar o sinal
						InterpretadorSinais.setSinal(sinal);
						InterpretadorSinais.interpretar();
						
						sinal = Uc.zeraTudo(64);
						
						//3 - ESCREVER O DADO NO ENDEREÇO
						//Marcar Adress Valid
						sinal[26] = 1;
						//Marcar escrita
						sinal[27] = 1;
						
						//Mandar executar o sinal
						InterpretadorSinais.setSinal(sinal);
						InterpretadorSinais.interpretar();
						
						sinal = Uc.zeraTudo(64);
					}
				}
			}
		}
		
		//Verificar se é uma comparação
		if(res[0].equals("CMP"))
		{
			//Registrador 1 -> Recebe o operando
			registrador = res[1];
			//Registrador 2 -> Recebe o outro operando
			registrador2 = res[2];
			
			//Marcar a porta de saída do registrador 1 e a porta de entrada do X
			sinal[mapaDeRegistradoresSaida.get(registrador)] = 1;
			sinal[14] = 1;
			
			InterpretadorSinais.setSinal(sinal);
			InterpretadorSinais.interpretar();
			
			sinal = Uc.zeraTudo(64);
			
			//Abrir a saída do X pra mandar o primeiro operando pra ULA
			sinal[15] = 1;
			
			//Ainda não vai ser executada operação nenhuma na ULA;
			
			//Mandar o segundo operando pro X
			
			//Se o segundo operando for um número ou letra minúscula(hexa)
			if(Character.isDigit(registrador2.charAt(0)) || (Character.isLetter(registrador2.charAt(0)) && Character.isLowerCase(registrador2.charAt(0))))
			{
				//Mandar o sinal de controle com o número em questão ao invés do registrador
				sinal[32] = Integer.parseInt(registrador2, 16);
				sinal[31] = 1;
			}
			else
			{
				//Caso contrário, é um CMP de Registrador e, portanto, basta abrir a porta do segundo registrador
				sinal[mapaDeRegistradoresSaida.get(registrador2)] = 1;
			}
			sinal[14] = 1;
			
			InterpretadorSinais.setSinal(sinal);
			InterpretadorSinais.interpretar();
			
			sinal = Uc.zeraTudo(64);
			
			//Abrir a saída do X pra mandar o segundo operando pra ULA
			sinal[15] = 1;
			
			//Abrir a saída do AC pra mandar o AC pro barramento
			sinal[16] = 1;
			
			//Mandar o sinal de comparação
			DevolveSinais(sinal, res[0]);
			
			InterpretadorSinais.setSinal(sinal);
			InterpretadorSinais.interpretar();
			
			sinal = Uc.zeraTudo(64);
			
			return;
		}
		
		//Instrução de Pulo - JMP
		if(res[0].equals("JMP"))
		{
			registrador = res[1];
			
			//Para uma instrução JMP, o operando é um endereço de memória, ou um endereço contido num registrador
			registrador = registrador.replaceAll("//[", "");
			registrador = registrador.replaceAll("//]", "");
			
			//Validar - Se o registrador for um número ou letra minúscula, é um endereço de memória
			if(Character.isDigit(registrador.charAt(0)) || (Character.isLetter(registrador.charAt(0)) && Character.isLowerCase(registrador.charAt(0))))
			{
				//Colocar o endereço nos bits de endereço
				sinal[32] = Integer.parseInt(registrador, 16);
				
				//Mandar o sinal para colocar o endereço na linha de endereço
				sinal[31] = 1;
				
				//Abrir a porta do PC
				sinal[9] = 1;
				
				//Executar instrucao
				InterpretadorSinais.setSinal(sinal);
				InterpretadorSinais.interpretar();
				
				sinal = Uc.zeraTudo(64);
			}
			//Caso contrário, é um número contido num registrador
			else
			{
				
			}
		}
	}
	
	public void DevolveSinais(Integer[] sinal, String instrucao)
	{
		Integer[] ulaInst = mapaDeInstrucoes.get(instrucao);
		
		sinal[22] = ulaInst[0];
		sinal[23] = ulaInst[1];
		sinal[24] = ulaInst[2];
		sinal[25] = ulaInst[3];
	}
}