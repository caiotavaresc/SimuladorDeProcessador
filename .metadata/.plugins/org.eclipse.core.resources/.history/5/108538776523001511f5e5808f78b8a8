package simulador;

import interfaceControle.TradutorDeInstrucoes;
import java.util.*;

//A classe controladora será responsável pela interação com o usuário
public class Memoria {
	
	//Lista das instruções escritas em assembly
	public List<String> instrucoes;
	
	//Lista das palavras de controle que representam as instruções
	//A ideia é que o usuário digite a instrução e a aplicação a transforme na palavra de controle
	public List<Integer[]> instrucoesBits;
	
	//Memória principal: Guarda tanto dados quanto instruções
	public List<Object> memoriaPrincipal;
	
	//Referência para o tradutor das instruções
	public TradutorDeInstrucoes tradutor;
	
	//Inicializar a memória
	public Memoria()
	{
		instrucoes = new ArrayList<String>();
		instrucoesBits = new ArrayList<Integer[]>();
		//---------------------------------
		memoriaPrincipal = new ArrayList<Object>();
		//---------------------------------
		tradutor = new TradutorDeInstrucoes(instrucoesBits);
		
		//Inicializar os mapas de instruções e registradores
		TradutorDeInstrucoes.carregarMapaDeInstrucoes();
		TradutorDeInstrucoes.carregarMapaDeRegistradoresEntrada();
		TradutorDeInstrucoes.carregarMapaDeRegistradoresSaida();
		
	}
	
	//Método que escreve a instrução em Assembly e guarda na memória os sinais traduzidos
	public void setInstrucao(String instrucao)
	{
		memoriaPrincipal.add(instrucao);
	}
	
	//Método que pega a instrução em Assembly
	//Acho que não vai servir pra nada, mas já tinha feito...
	public String getInstrucao(int i)
	{
		return instrucoes.get(i);
	}
	
	//Método que limpa as instruções das memórias
	public void clear()
	{
		instrucoes.clear();
		instrucoesBits.clear();
	}
	
	//Imprimir as instruções armazenadas em memória
	public void imprimeMemoria()
	{
		Iterator<String> it = instrucoes.iterator();
		
		while(it.hasNext())
			System.out.println(it.next());
	}
	
	//------------------------------Métodos de Impressão para memórias de sinais de controle-------------------------//
	public static <T extends Number> void imprimeArray (T[] arr)
	{
		for(int i = 0; i < arr.length; i++)
			System.out.print(arr[i]);

		System.out.println();
	}
	
	public void imprimeMemoriaBits()
	{
		Iterator<Integer[]> it = instrucoesBits.iterator();
		Integer[] instrucao;
		
		while(it.hasNext())
		{
			instrucao = it.next();
			imprimeArray(instrucao);
		}
	}
}